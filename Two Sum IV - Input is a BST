class BSTIterator {
    private Stack<TreeNode> stack = new Stack<>();
    // reverse->true->before
    // reverse->false->next
    boolean reverse = true;  
    
    public BSTIterator(TreeNode root , boolean isReverse)
    {
        reverse = isReverse;
        pushAll(root);
    }
    
    public boolean hasNext()
    {
        return !stack.isEmpty();
    }
    public int nextAndBefore()
    {
        TreeNode temp = stack.pop();
        if(reverse == false)pushAll(temp.right);
        else
            pushAll(temp.left);
        
        return temp.val;
    }
    
    public void pushAll(TreeNode node)
    {
        while(node!= null)
        {   stack.push(node);
            if(reverse == false)
                node = node.left;
            else
                node = node.right;
        }
        
    }
}

class Solution {
    public boolean findTarget(TreeNode root, int k) {
        if(root == null)
            return false;
        
        BSTIterator l = new BSTIterator(root ,  false);         //Next
        BSTIterator r = new BSTIterator(root , true);           //before
        
        int i = l.nextAndBefore();
        int j = r.nextAndBefore();
        while(i<j){
            if(i+j == k)return true;
            else if(i+j < k)
                i = l.nextAndBefore();
            else 
                j = r.nextAndBefore();
        }
        return false;
    }
}

class Tuple {
    TreeNode node;
    int row;
    int col;
    public Tuple(TreeNode _node , int _row, int _col){
    node = _node;
    row = _row;
    col = _col;
    }
}
class Solution {
    public List<List<Integer>> verticalTraversal(TreeNode root) {
        TreeMap<Integer , TreeMap<Integer , PriorityQueue<Integer>>> map = new TreeMap<>();
        Queue<Tuple> q =  new LinkedList<Tuple>();
        q.offer(new Tuple(root, 0 ,0));
        while(!q.isEmpty()) {
            Tuple tuple  = q.poll();
            TreeNode node = tuple.node;
            int x = tuple.row;
            int y = tuple.col;
            
            if(!map.containsKey(x))                             //each object is saved as tuple. Data type of tuple is created to do that
                map.put(x , new TreeMap<>());
            
            if(!map.get(x).containsKey(y))
                map.get(x).put(y , new PriorityQueue<>());
            
            map.get(x).get(y).offer(node.val);
            
            if(node.left != null)
                q.offer(new Tuple(node.left , x-1 , y+1));
            
            if(node.right != null)
                q.offer(new Tuple(node.right , x+1, y+1));
            
        }
        
        List<List<Integer>> list =  new ArrayList<>();
        for(TreeMap<Integer, PriorityQueue<Integer>> ys : map.values()){
            list.add(new ArrayList<>());                                                            // adding a new list(empty) to the 2d list
            for(PriorityQueue<Integer> nodes : ys.values()){                        // This is for the printing of the data structure
                while(!nodes.isEmpty()){
                    System.out.println(nodes.peek());
                    list.get(list.size() - 1).add(nodes.poll());
                }
            }
        }
        return list; 
    }
}
